<div class="table-responsive" id="cartTable">
    <table class="table shopping-summery text-center clean">
        <thead>
            <tr class="main-heading">
                <th scope="col">Image</th>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Subtotal</th>
                <th scope="col">Remove</th>
            </tr>
        </thead>
        <tbody>

            <% items.forEach(item=> { %>

                <tr data-item-id="<%= item.product._id %>">
                    <td class="image product-thumbnail"><img src="<%= item.product.productImageUrls[0] %>" alt="#"></td>
                    <td class="product-des product-name">
                        <h5 class="product-name"><a href="/product/<#%=product._id%>">
                                <%= item.product.productName %>
                            </a></h5>
                        </p>
                    </td>
                    <td class="price" data-title="Price"><span>&#8377;<%= item.product.productPrice %></span></td>
                    <td class="text-center" data-title="Stock">
                        <div class="detail-qty border radius  m-auto">
                            <a href="#" class="qty-down"><i class="fi-rs-angle-small-down"></i></a>
                            <span class="qty-val">
                                <%= item.quantity %>
                            </span>
                            <a href="#" class="qty-up"><i class="fi-rs-angle-small-up"></i></a>
                        </div>
                    </td>
                    <td class="text-right" id="subtotal" data-title="Cart"
                        data-price="<%= item.product.productPrice %>">
                        <span id="subtotalValue">
                            <%= (item.product.productPrice * item.quantity).toLocaleString('en-IN', { style: 'currency'
                                , currency: 'INR' }) %>
                        </span>
                    </td>
                    <td class="action" onclick="removeProduct('<%= item.product._id %>')" data-title="Remove"><a
                            class="text-muted"><i class="fi-rs-trash"></i></a></td>
                </tr>
                <% }) %>
                    <tr>
                        <td colspan="6" class="text-end">
                            <a id="clearCartLink" class="text-muted "> <i class="fi-rs-cross-small"></i> Clear Cart</a>
                        </td>
                    </tr>
        </tbody>
    </table>
</div>

<div class="cart-action text-end">
    <a class="btn" href="/shop"><i class="fi-rs-shopping-bag mr-10"></i>Continue shopping</a>
</div>

<script>
    const clearCartLink = document.getElementById('clearCartLink');
    clearCartLink.addEventListener('click', (event) => {
        event.preventDefault();
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, clear it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                const url = '/clear-cart';
                const response = await fetch(url, {
                    method: 'delete',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                const result = await response.json();
                if (result.success) {
                    window.location.reload()
                } else {
                    callAlertify('error', result.message);
                }
            }
        })
    })


    function removeProduct(productId) {

        Swal.fire({
            title: 'Are you sure?',
            text: "Product delete from the cart?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes,delete!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                const url = '/cart';
                const response = await fetch(url, {
                    method: 'delete',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId: productId
                    })

                }).then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                    .then(data => {
                        console.log('Product deleted:', data);
                        const cartItem = document.querySelector(`tr[data-item-id="${productId}"]`);
                        const isLastItem = cartItem.parentElement.rows.length === 2;
                        if (isLastItem) {
                            window.location.reload();
                            return;
                        }
                        cartItem.remove();

                    })
                    .catch(error => {
                        console.error('Error deleting product:', error);
                        callAlertify('error', 'error deleting product')
                    });
            }
        })
    }

    document.querySelectorAll(".qty-up, .qty-down").forEach(function (button) {
        button.addEventListener("click", function () {
            var itemId = this.closest("tr").getAttribute("data-id");
            var quantityElement = this.parentNode.querySelector(".qty-val");
            var quantity = parseInt(quantityElement.textContent);

            if (this.classList.contains('qty-up')) {
                quantity++;
            } else {
                quantity--;
            }

            if (quantity > 100) {
                quantity = 100;
            } else if (quantity < 1) {
                quantity = 1;
            }

            // fetch("/api/cart/items/" + itemId, {
            //     method: "PATCH",
            //     headers: {
            //         "Content-Type": "application/json"
            //     },
            //     body: JSON.stringify({ quantity: quantity })
            // })
            //   .then(function (response) {
            //     if (response.ok) {
            //       return response.json();
            //     }
            //     throw new Error("Network response was not ok.");
            //   })
            //   .then(function (data) {
            //     quantityElement.textContent = quantity;
            //     button.closest("tr").querySelector(".text-right span").textContent = data.totalPrice.toLocaleString('en-IN', { style: 'currency', currency: 'INR' });
            //   })
            //   .catch(function (error) {
            //     console.error("There was a problem with the fetch operation:", error);
            //   });

            var price = Number(this.closest("tr").querySelector('#subtotal').getAttribute('data-price'));
            var subtotalElement = this.closest("tr").querySelector('#subtotalValue');
            var subtotal = price * quantity;
            subtotalElement.textContent = subtotal.toLocaleString('en-IN', { style: 'currency', currency: 'INR' });
        });
    });


</script>